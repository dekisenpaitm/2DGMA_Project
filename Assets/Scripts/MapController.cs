//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/MapController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MapController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MapController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MapController"",
    ""maps"": [
        {
            ""name"": ""Movemap"",
            ""id"": ""e045133f-55df-4c35-8730-148da7124dc1"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""313369a0-0238-482a-8580-bbb6527676cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4f379730-c2e5-428e-a658-33dbec82b7ac"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3efaee5c-a56c-408d-95b0-9c3da2d07b7b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2769fbc3-d011-4895-95a9-677ee20fd448"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movemap
        m_Movemap = asset.FindActionMap("Movemap", throwIfNotFound: true);
        m_Movemap_Move = m_Movemap.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movemap
    private readonly InputActionMap m_Movemap;
    private List<IMovemapActions> m_MovemapActionsCallbackInterfaces = new List<IMovemapActions>();
    private readonly InputAction m_Movemap_Move;
    public struct MovemapActions
    {
        private @MapController m_Wrapper;
        public MovemapActions(@MapController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movemap_Move;
        public InputActionMap Get() { return m_Wrapper.m_Movemap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovemapActions set) { return set.Get(); }
        public void AddCallbacks(IMovemapActions instance)
        {
            if (instance == null || m_Wrapper.m_MovemapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovemapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMovemapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMovemapActions instance)
        {
            if (m_Wrapper.m_MovemapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovemapActions instance)
        {
            foreach (var item in m_Wrapper.m_MovemapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovemapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovemapActions @Movemap => new MovemapActions(this);
    public interface IMovemapActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
